[{"categories":["Linux","SysAdmin"],"content":"The Earthly is an effortless CI/CD framework that combines the power of Docker, Makefile and Bash and provides an easy to use build system that runs locally and on cloud based systems such as Github-Actions, Circle-CI and so on.\nEarthly will look for docker eventhough it doesn\u0026rsquo;t depend on it explicitly. For those who prefer podman as an alternate to using docker the following guide will help in setting up Earthly to use podman instead of docker.\nSetup Podman on Ubuntu For details on installing Podman on Ubuntu, please refer to this blog post.\nEnable user-specific podman service In order for the podman to serve as a backend for docker-compose in a rootless setup, we need to enable podman systemctl service for a given user. Hence, as a non-root user, run the following commands to enable the same.\n1systemctl --user enable podman.service 2systemctl --user start podman.service After the above commands run successfully, add the following entry into ~/.bashrc file so that, it is available in all the user\u0026rsquo;s shell sessions.\n1export DOCKER_HOST=unix://${XDG_RUNTIME_DIR}/podman/podman.sock TIP Make sure you close the existing terminal session and open a new one for the changes in ~/.bashrc to get reflected. Enable unified cgroup hierarchy The sysfs on your system should have \u0026ldquo;/sys/fs/cgroup/user.slice\u0026rdquo;. If this does not exists, you need to enable it in grub configuration. If the folder already exists, you can skip this step.\nOpen the file /etc/default/grub as administrator (i.e., user with sudo access) in a text editor (Ex., vim, nano). Add the entry systemd.unified_cgroup_hierarchy=1 to GRUB_CMDLINE_LINUX_DEFAULT (i.e., append it to the end of the space separated value string if, it doesn\u0026rsquo;t already exists). Save the file and close the editor. Reboot the machine. Setup systemd for cgroup permissions The non-root users of the system need cgroup delegation permissions for cpu, memory, io and pids. This needs to be configured in systemd as follows. All the actions need to be performed as administrator (i.e., root user or, user with sudo access).\nNOTE On Ubuntu 22.04, it is sufficient to add the file /etc/systemd/system/user@.service.d/delegate.conf as described below. Older versions (or other Debian variants) might require all the steps. Create a file /etc/systemd/system/user-0.slice with the following content. This step is mainly needed for systems with systemd version 239 or below. You may skip this step if the version of systemd in your system is 240 or above or, if you are using Ubuntu 22.04.\n1[Unit] 2Before=systemd-logind.service 3[Slice] 4Slice=user.slice 5[Install] 6WantedBy=multi-user.target Create the user-service folders as below.\n1mkdir -p /etc/systemd/system/user@.service.d 2mkdir -p /etc/systemd/system/user-.slice.d # Not needed for Ubuntu 22.04 Create the file /etc/systemd/system/user@.service.d/delegate.conf with the following content.\n1[Service] 2Delegate=cpu cpuset io memory pids Create the file /etc/systemd/system/user-.slice.d/override.conf with the following content. This step is not needed if you are using Ubuntu 22.04.\n1[Slice] 2Slice=user.slice 3 4CPUAccounting=yes 5MemoryAccounting=yes 6IOAccounting=yes 7TasksAccounting=yes Reload systemctl daemon and enable the added user-0.slice service.\n1systemctl daemon-reload 2systemctl enable user-0.slice # Not needed for Ubuntu 22.04 Finally, reboot the machine for the permissions to show up per user.\nTesting cgroup permissions As a non-root user, run the following command to verify that you have the required cgroup delegation permissions.\n1cat \u0026#34;/sys/fs/cgroup/user.slice/user-$(id -u).slice/user@$(id -u).service/cgroup.controllers\u0026#34; It should show up the items - cpu cpuset io memory pids, as set in the delegate.conf file above. You are now ready to install earthly and use it with podman.\nSetup Earthly on Ubuntu For details on installing Earthly on Ubuntu, please refer to this blog post.\nTesting Earthly with Podman If you have followed the above steps to install podman and earthly, create a file named Earthfile locally with the following content.\n1VERSION 0.6 2FROM python:3 3 4build: 5 RUN mkdir -p /src \u0026amp;\u0026amp; echo \u0026#34;print(\u0026#39;Hello Earthly!\u0026#39;)\u0026#34; \u0026gt;\u0026gt; /src/hello.py 6 SAVE ARTIFACT src /src 7 8docker: 9 COPY +build/src src 10 ENTRYPOINT [\u0026#34;python3\u0026#34;, \u0026#34;./src/hello.py\u0026#34;] 11 SAVE IMAGE python-example:latest From the same folder where the file is created, run earthly +docker. From the build output, you should see that earthly is using podman internally to run the build.\nAfter build is complete, run podman run python-example:latest. You should see Hello Earthly! as the output.\nReferences Special thanks to the people who have already given the information in various blogs and forums.\nEarthly Blog Stack Exchange ","date":"Sep 6, 2022","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/posts/earthly-podman-setup/","series":["Reference"],"smallImg":"","tags":["linux","debian","ubuntu","podman","earthly","cicd"],"title":"Earthly CI-CD With Podman"},{"categories":["Linux","SysAdmin"],"content":"Here is a link to the bash-script to configure apt repository for Earthly . The script is available as a GitHub Gist. Hence, you are requested to open the link to the bash-script and download the script (or, copy-paste the raw content into a file using a text-editor) to use it directly from your Debian-based system such as Debian, Ubuntu or LinuxMint (including LMDE).\nThe script will setup the proper apt repository configuration file under /etc/apt/sources.list.d and installs earthly. It will also try to use podman to bootstrap earthly, if podman is already installed.\nPrerequisites The script should be run using an administrator account (i.e., with sudo access).\n","date":"Sep 6, 2022","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/posts/setup-apt-earthly/","series":["Reference"],"smallImg":"","tags":["linux","debian","ubuntu","earthly","cicd"],"title":"Earthly for Debian Based Systems"},{"categories":["Linux","SysAdmin"],"content":"Here is a link to the bash-script to configure apt repository for Podman . The script is available as a GitHub Gist. Hence, you are requested to open the link to the bash-script and download the script (or, copy-paste the raw content into a file using a text-editor) to use it directly from your Debian-based system such as Debian, Ubuntu or LinuxMint (including LMDE).\nThe script will setup the proper apt repository configuration file under /etc/apt/sources.list.d, installs podman and buildah. It will also add the local libpod.conf file for the administrator user (i.e., non-root user with sudo previleges), running the script.\nPrerequisites The script should be run using an administrator account (i.e., with sudo access).\n","date":"Aug 31, 2022","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/posts/setup-apt-podman/","series":["Reference"],"smallImg":"","tags":["linux","debian","ubuntu","podman"],"title":"Podman for Debian Based Systems"},{"categories":["Linux","SysAdmin"],"content":"Here is a script to find out the next suggested SemVer versions for a Github project. The script works on both private and public repositories. If using a private repo, you need to export an environment variable named GITHUB_PAT with the value of your github personal access token. This script depends mainly on the git tags. If you use a custom prefix for your git tags, you need to provide it as an option.\nYou can run the script without any options to view the help content.\nPrerequisites The script requires git command to be available in the PATH. Please ensure that you have git installed on your system.\nUsing the script Below are the steps to use the script.\nCopy the below script and save it as next-github-project-version.sh. Change the executable bit by running: chmod +x next-github-project-version.sh. The script is now ready to be run. It takes two mandatory commandline arguments and an optional third argument. The first argument is the github organization name. The second argument is the github project name. The optional, third argument is the tag-prefix which you might be using while adding git tags. Ex., v is the tag-prefix in v1.2.0. 1#!/bin/bash 2 3set -e 4set -m 5 6if [ $# -lt 2 ]; then 7 echo -e \u0026#34;Usage: $(basename $0) \u0026lt;github-org\u0026gt; \u0026lt;github-project\u0026gt; [tag-prefix]\u0026#34; 8 echo -e \u0026#34;NOTE: If the project needs authentication, export GITHUB_PAT env variable with your Github personal access token.\u0026#34; 9 echo -e \u0026#34;tag-prefix is optional and is empty by default.\u0026#34; 10 11 exit 1 12fi 13 14org_name=$1 15project_name=$2 16tag_prefix=$3 17 18OLD_IFS=$IFS 19 20## Generate the Github base-url 21if [ -n \u0026#34;${GITHUB_PAT}\u0026#34; ]; then 22 url_base=\u0026#34;https://${GITHUB_PAT}@github.com\u0026#34; 23else 24 url_base=\u0026#34;https://github.com\u0026#34; 25fi 26 27## We are not considering versions with alphanumeric endings. 28## The supported version number format is major.minor.patch.build 29ver_regex=\u0026#34;(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)?$\u0026#34; 30extver_regex=\u0026#34;(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$\u0026#34; 31 32## Sample version values for testing 33#ver_tag=\u0026#34;ref/tags/v2.1.3\u0026#34; 34#extver_tag=\u0026#34;ref/tags/v2.1.3-alpha.19+asfs.239\u0026#34; 35 36sorted_tags=\u0026#34;$(git ls-remote --tags --sort=version:refname ${url_base}/${org_name}/${project_name}.git | awk {\u0026#39;print $2\u0026#39;})\u0026#34; 37 38if [ -n \u0026#34;$tag_prefix\u0026#34; ]; then 39 ver_tag=$(echo \u0026#34;$sorted_tags\u0026#34; | grep -P \u0026#34;refs/tags/${tag_prefix}${ver_regex}\u0026#34; | tail -1) 40 extver_tag=$(echo \u0026#34;$sorted_tags\u0026#34; | grep -P \u0026#34;refs/tags/${tag_prefix}${extver_regex}\u0026#34; | tail -1) 41else 42 ver_tag=$(echo \u0026#34;$sorted_tags\u0026#34; | grep -P \u0026#34;refs/tags/${ver_regex}\u0026#34; | tail -1) 43 extver_tag=$(echo \u0026#34;$sorted_tags\u0026#34; | grep -P \u0026#34;refs/tags/${extver_regex}\u0026#34; | tail -1) 44fi 45 46## Suggest next possible versions 47if [ -n \u0026#34;${ver_tag}\u0026#34; ]; then 48 if [ -n \u0026#34;$tag_prefix\u0026#34; ]; then 49 curr_ver=$(echo $ver_tag | awk -F \u0026#39;/\u0026#39; {\u0026#39;print $3\u0026#39;} | sed -e \u0026#34;s%${tag_prefix}%%\u0026#34;) 50 else 51 curr_ver=$(echo $ver_tag | awk -F \u0026#39;/\u0026#39; {\u0026#39;print $3\u0026#39;}) 52 fi 53 54 IFS=\u0026#39;.\u0026#39; read -r -a ver_parts \u0026lt;\u0026lt;\u0026lt;\u0026#34;$curr_ver\u0026#34; 55 56 ver_major=${ver_parts[0]} 57 ver_minor=${ver_parts[1]} 58 ver_patch=${ver_parts[2]} 59fi 60 61if [ -n \u0026#34;${extver_tag}\u0026#34; ]; then 62 if [ -n \u0026#34;$tag_prefix\u0026#34; ]; then 63 curr_extver=$(echo $extver_tag | awk -F \u0026#39;/\u0026#39; {\u0026#39;print $3\u0026#39;} | sed -e \u0026#34;s%${tag_prefix}%%\u0026#34;) 64 else 65 curr_extver=$(echo $extver_tag | awk -F \u0026#39;/\u0026#39; {\u0026#39;print $3\u0026#39;}) 66 fi 67 68 IFS=\u0026#39;-\u0026#39; read -ra parts \u0026lt;\u0026lt;\u0026lt;\u0026#34;$curr_extver\u0026#34; 69 IFS=\u0026#39;.\u0026#39; read -r -a core_parts \u0026lt;\u0026lt;\u0026lt;\u0026#34;${parts[0]}\u0026#34; 70 IFS=\u0026#39;+\u0026#39; read -r -a ext_parts \u0026lt;\u0026lt;\u0026lt;\u0026#34;${parts[1]}\u0026#34; 71 72 extver_major=${core_parts[0]} 73 extver_minor=${core_parts[1]} 74 extver_patch=${core_parts[2]} 75 extver_pre=${ext_parts[0]} 76 extver_bld=${ext_parts[1]} 77 78 echo -e \u0026#34;Current version information:\u0026#34; 79 echo -e \u0026#34;############################\\n\u0026#34; 80 echo -e \u0026#34;Major: $extver_major, Minor: $extver_minor, Patch: $extver_patch\u0026#34; 81 echo -e \u0026#34;Pre-release: $extver_pre, Build: $extver_bld\u0026#34; 82fi 83 84if [ -n \u0026#34;$extver_pre\u0026#34; ]; then 85 if [ -n \u0026#34;$ver_tag\u0026#34; ]; then 86 curr_major=$ver_major 87 curr_minor=$ver_minor 88 curr_patch=$ver_patch 89 90 use_extver=0 91 92 if [ $extver_major -gt $ver_major ]; then 93 use_extver=1 94 elif [ $extver_major -eq $ver_major ] \u0026amp;\u0026amp; [ $extver_minor -gt $ver_minor ]; then 95 use_extver=1 96 elif [ $extver_major -eq $ver_major ] \u0026amp;\u0026amp; [ $extver_minor -eq $ver_minor ] \u0026amp;\u0026amp; [ $extver_patch -gt $ver_patch ]; then 97 use_extver=1 98 fi 99 100 if [ $use_extver -eq 1 ]; then 101 curr_major=$extver_major 102 curr_minor=$extver_minor 103 curr_patch=$extver_patch 104 fi 105 else 106 curr_major=$extver_major 107 curr_minor=$extver_minor 108 curr_patch=$extver_patch 109 fi 110 111 ## Compute next versions of pre-release and build parts. 112 if [ -n \u0026#34;$extver_bld\u0026#34; ]; then 113 bldver_num=$(echo $extver_bld | grep -o -E \u0026#34;[0-9]+$\u0026#34;) 114 115 if [ -n \u0026#34;$bldver_num\u0026#34; ]; then 116 bldver_txt=$(echo $extver_bld | sed -e \u0026#34;s|${bldver_num}$||\u0026#34;) 117 nxtver_bld=\u0026#34;${bldver_txt}$((bldver_num + 1))\u0026#34; 118 fi 119 120 nxtver_pre=$extver_pre 121 fi 122 123 prever_num=$(echo $extver_pre | grep -o -E \u0026#34;[0-9]+$\u0026#34;) 124 125 if [ -n \u0026#34;$prever_num\u0026#34; ]; then 126 prever_txt=$(echo $extver_pre | sed -e \u0026#34;s|${prever_num}$||\u0026#34;) 127 nxtver_pre=\u0026#34;${prever_txt}$((prever_num + 1))\u0026#34; 128 fi 129else 130 curr_major=$ver_major 131 curr_minor=$ver_minor 132 curr_patch=$ver_patch 133fi 134 135echo -e \u0026#34;\\nNEXT SUGGESTED VERSIONS:\u0026#34; 136echo -e \u0026#34;########################\\n\u0026#34; 137echo -e \u0026#34;Next Major: $((curr_major + 1)).0.0\u0026#34; 138echo -e \u0026#34;Next Minor: ${curr_major}.$((curr_minor + 1)).0\u0026#34; 139 140if [ -n \u0026#34;$nxtver_pre\u0026#34; ]; then 141 if [ $use_extver -eq 1 ]; then 142 echo -e \u0026#34;Next Patch (GA): ${curr_major}.${curr_minor}.${curr_patch}\u0026#34; 143 else 144 echo -e \u0026#34;Next Patch: ${curr_major}.${curr_minor}.$((curr_patch + 1))\u0026#34; 145 fi 146 echo -e \u0026#34;Next Pre-Release: ${curr_major}.${curr_minor}.${curr_patch}-${nxtver_pre}\u0026#34; 147else 148 echo -e \u0026#34;Next Patch: ${curr_major}.${curr_minor}.$((curr_patch + 1))\u0026#34; 149fi 150 151if [ -n \u0026#34;$nxtver_bld\u0026#34; ]; then 152 echo -e \u0026#34;Next Build: ${curr_major}.${curr_minor}.${curr_patch}-${extver_pre}+${nxtver_bld}\u0026#34; 153fi 154 155IFS=$OLD_IFS 156 157exit 0 ","date":"Aug 25, 2022","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/posts/git-project-next-version/","series":["Reference"],"smallImg":"","tags":["linux","debian","ubuntu","github","semver"],"title":"Get Next Github Project Version"},{"categories":["Linux","Programming"],"content":"This post captures various best-practices and/or useful suggestions which might come handy while programming in Java. These are purely my observations and opinion using Java as the programming language to create backend services and cross-platform applications. Moreover, I have been using the latest stable version of Java (v17 LTS). Hence, some of the points might not be relevant to older versions. But, I try to capture the features which are common enough in the recent past.\nOne of the fundamental mental model that a typical Java developer needs to develop is, to get a clarify on when to use a Class and when to use an Interface. In fact Class and Interface, if used judiciously, can compliment each other and adapt natually to suite one\u0026rsquo;s programming goals. Instead of being too descriptive, let me jot down some of the usecases and try to explain those with an example.\nA quick recap of OOP with Java In an OOP language such as Java, an object represents an entity which has states and behaviours. The state is typically captured via the fields / member variables of the object. The behaviour is typically handled via the methods / member functions of the object. The state should be internal to an object. It should not be exposed and modified directly by externally. The behaviours are meant to handle all the state changes and act upon internal events (within the object) and external events (within the system in which the object belongs and also from the connected ecosystem). NOTE The term behavioural siganture in this article essentially means, a method signature in an interface or a class. The classes which implement those behaviours can have completely independent and unrelated implementation details, as needed. Usecases Entities of same kind, requiring a common set of behavioural signatures.\nThe requirement here is to have multiple entities of the same kind, all of which requiring a common set of behavioural signatures.\nSolution:\nImplement an abstract base class with abstract and non-abstract methods. The non-abstract methods are meant to provide base implementation so that, the derived entity classes can skip their implementations as needed. Extend the abstract class with appropriate entity classes, overriding the methods as required. SAMPLE Checkout the sample Java classes - Shape.java, Circle.java, Rectangle.java under class-vs-iface . Here, the \u0026lsquo;Circle\u0026rsquo; and \u0026lsquo;Rectangle\u0026rsquo; classes are of the same kind \u0026lsquo;Shape\u0026rsquo;. Hence, they extend the \u0026lsquo;Shape\u0026rsquo; base class. Entities of different kind, requiring a common set of behavioural signatures.\nThe requirement here is to have multiple, unrelated entities, all of which requiring a common set of behavioural signatures.\nSolution:\nDefine an interface covering all the method signatures, as required by the entity classes. Provide default implementations of methods if some of the entity classes might not implement one or more interface methods immediately. Create various entity classes implementing the interface. In the future, if any new method signature needs to be added to the interface, do provide a default implementation so that existing entity classes still satisfy the interface definition. This allows the entity classes to provide overridden method implementations in the future, as required. SAMPLE Checkout the sample Java classes - Authenticator.java, User.java, AppClient.java under class-vs-iface . Here, \u0026lsquo;User\u0026rsquo; and \u0026lsquo;AppClient\u0026rsquo; classes are of different kind. \u0026lsquo;User\u0026rsquo; class represents a person or, user while \u0026lsquo;AppClient\u0026rsquo; represents a registered, application-client for a given web service. Hence, both these classes implement the interface \u0026lsquo;Authenticator\u0026rsquo; independently. Entities of mixed kinds, requiring a common set of behavioural signatures.\nThe requirement here is to have multiple, closely related and unrelated entities, all of which requiring a common set of behavioural signatures.\nSolution:\nDefine an interface covering all the method signatures, as required by the entity classes. Define various abstract classes implmenting the defined interface, each for a set of closely related entities. Implement the defined interface directly for entity classes which do not derive from any of the abstract class(es) as defined above. Create various closely related entity classes by extending the appropriate abstract class. Each of them may further override the methods as appropriate. In the future, if any new method signature needs to be added to the interface, do provide a default implementation so that existing classes (abstract or otherwise) still satisfy the interface definition. This allows the implementing classes to provide overridden method implementations in the future, as required. SAMPLE Checkout the sample Java classes - Authenticator.java, User.java, LeadUser.java, SalesUser.java, AppClient.java under class-vs-iface . Here, the classes \u0026lsquo;User\u0026rsquo; and \u0026lsquo;AppClient\u0026rsquo; are of different kind and hence, implement the \u0026lsquo;Authenticator\u0026rsquo; interface independently. The classes \u0026lsquo;LeadUser\u0026rsquo; and \u0026lsquo;SalesUser\u0026rsquo; are of the kind \u0026lsquo;User\u0026rsquo;. Hence, they extend the \u0026lsquo;User\u0026rsquo; which, also satisfies the \u0026lsquo;Authenticator\u0026rsquo; interface. The maven based, sample Java project explaining the above usecases can be found in the class-vs-iface module folder of the java-points git repository;\n","date":"Dec 12, 2021","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/posts/java-class-vs-iface/","series":["Reference"],"smallImg":"","tags":["java","best-practice"],"title":"Using Abstract Class and Interface in Java"},{"categories":["Linux","SysAdmin"],"content":"In this post, I\u0026rsquo;ll be describing how to setup automatic mounting of one or more Google Drives locally, on your Ubuntu system. Following steps should generally work for the supported Ubuntu versions of the google-drive-ocamlfuse tool. Let\u0026rsquo;s just right into the setup steps.\nAssumptions Here are the list of assumptions made for descriptive purposes. Please replace them with appropriate values based on your system and environment.\nNormal user: ubuntu Base path for GDrive mount folders: $HOME/Store (Ex., /home/ubuntu/Store) Gmail address corresponding to the drive: sample01@gmail.com Mount folder for GDrive under base path: gdrive01 Install Google Drive tool for Ubuntu Thanks to Alessandro Strada for this nice tool called google-drive-ocamlfuse , written in OCAML language. We will be using this tool to mount one or more Google Drives under appropriate folder(s) locally. Pre-built binaries for this tool are available from Ubuntu PPA . It can be installed as follows. For more detailed installation steps and other ways to install and setup your system, please refer to the tool\u0026rsquo;s link as mentioned earlier.\nInstall google-drive-ocamlfuse tool by running the following commands in a terminal, with superuser privileges (i.e., sudo).\n1sudo add-apt-repository ppa:alessandro-strada/ppa 2sudo apt-get update 3sudo apt-get install google-drive-ocamlfuse 4sudo dpkg --configure -a ## Optional, mainly to complete any pending package configurations Setup BASH script to mount Google Drive(s) Open a text editor as normal user and create a new BASH script by name mount-google-drives with the following content. Edit the values in the configuration block based on your need. 1#!/bin/bash 2# Script to mount google-drive accounts locally 3 4############ Configuration block - START ############ 5## Either \u0026#39;export\u0026#39; GDRIVE_BASE folder in ~/.bashrc or, 6## completely hardcode the absolute path here. 7## 8## This indicates the base folder under which, various 9## google-drive account folders are mounted. 10GDRIVE_BASE=${GDRIVE_BASE:-$HOME/Store} 11 12## Define mapping between a google-account label and 13## corresponding destination folder to mount it. The 14## mount-dir (i.e., destination folder) will be a folder 15## within the GDRIVE_BASE. 16## 17## The label need not match exactly with your gmail username 18## part. It\u0026#39;s just an identifier to help you in identifying 19## the mounted google-drive. 20## 21## Multiple label-mount-dir can be provided in the array 22## below, by adding them in their own line. 23GDRIVE_MAPPING=( 24 #\u0026#34;label|mount-dir\u0026#34; 25 \u0026#34;sample01|gdrive01\u0026#34; 26) 27############ Configuration block - END ############ 28 29############ No need to touch anything below this ############ 30for drv in $GDRIVE_MAPPING; do 31 label=$(echo $drv | awk -F \u0026#39;|\u0026#39; \u0026#39;{print $1}\u0026#39;) 32 mount_dir=$(echo $drv | awk -F \u0026#39;|\u0026#39; \u0026#39;{print $2}\u0026#39;) 33 34 [[ -z \u0026#34;$label\u0026#34; ]] || [[ -z \u0026#34;$mount_dir\u0026#34; ]] \u0026amp;\u0026amp; echo -e \u0026#34;GDrive label or mount-dir not defined!\u0026#34; \u0026amp;\u0026amp; exit 1 35 36 mount_point=\u0026#34;$GDRIVE_BASE/$mount_dir\u0026#34; 37 38 CHECK_DRIVE=$(mount | grep -E \u0026#34;$mount_point\u0026#34; | grep -v \u0026#34;grep\u0026#34;) 39 [[ -z \u0026#34;${CHECK_DRIVE}\u0026#34; ]] \u0026amp;\u0026amp; mkdir -p $mount_point \u0026amp;\u0026amp; google-drive-ocamlfuse -label $label $mount_point \u0026amp;\u0026amp; \\ 40 sync || echo -e \u0026#34;GDrive for ${label} already mounted\u0026#34; 41done 42 43exit 0\nSave the file and close the editor.\nMove the file into $HOME/.local/bin folder. If the folder doesn\u0026rsquo;t exist, create it by running mkdir -p $HOME/.local/bin.\nSet the executable bit for the script by running chmod +x $HOME/.local/bin/mount-google-drives.\nEnsure that $HOME/.local/bin is set as part of the PATH environment variable by running echo $PATH.\nIf $HOME/.local/bin is not set as part of the PATH environment, you can add the following line to $HOME/.bashrc file\n1PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; Close the terminal.\nThe script should be good enough for manual mounting of Google drives at any point. This script also ensures that, the Google drives are mounted only once, even if it is run multiple times.\nIn case, you would like the Google drives to get automated on every login, you just need to do the following.\nOpen a text editor and create the file mount-google-drives.desktop under $HOME/.config/autostart folder. Create the folder, if it doesn\u0026rsquo;t already exist.\n1[Desktop Entry] 2Type=Application 3Exec=/home/ubuntu/.local/bin/mount-google-drives 4Hidden=false 5NoDisplay=false 6X-GNOME-Autostart-enabled=true 7Name[en_US]=Google Drives 8Name=Google Drives 9Comment[en_US]=Mount Google Drive locally 10Comment=Mount Google Drive locally TIP Update the absolute path to the `mount-google-drives` script for `Exec` entry based on your username. Save the file and close the editor.\nNow, logout of your desktop session and login again. If all the steps are followed correctly, you should see your mounted Google drive(s) locally, using File Explorer or by running df -TH command in a terminal.\nHope it helped you!\n","date":"Nov 14, 2021","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/posts/gdrive-fuse-mount/","series":["Reference"],"smallImg":"","tags":["linux","ubuntu","google-drive"],"title":"Mount Google-Drive in Ubuntu"},{"categories":["Linux","SysAdmin"],"content":"In case CDMA technology is still offered in your area, this post might be useful to you in setting up a simple Home WiFi using a CDMA modem, WiFi router and a Linux machine. This could be a good excercise to revive your old Linux box and that old WiFi router which had been laying useless :-).\nWhat you need Linux machine - An old Debian / Ubuntu Linux pc will do too. WiFi router - An old 2.4GHz router from DLink would work. CDMA-1x USB modem - Typically available as CDMA USB-Dongle. Ethernet cable to connect the Router to the Linux machine. Hardware setup Configure the WiFi router to act as an access point using the Router\u0026rsquo;s web interface. Connect the Ethernet cable to one of the 4 ports of the Router and the other end to the Linux machine\u0026rsquo;s Ethernet port. Connect the CDMA USB modem to one of the USB port of the Linux machine. Software setup Install the following packages using the package manager.\n1apt-get install -y pppd wvdial iptables dnsmasq Ensure that the Linux device driver modules usbserial and cdc_acm are loaded. You may use the command insmod in case they are not already loaded.\nSetting up the WiFi This process involves the following main steps.\nConfiguring kernel modules for auto-loading at bootup Configuring and running “wvdial” for dialup (ppp) connection Setting up “iptables” for NAT forwarding Setting up “dnsmasq” for resolving DNS and as DHCP server Configure Kernel modules Open a terminal and the command sudo bash in order to enter BASH as super-user.\nEdit the file /etc/modules and append the following lines if they do not already exist. Check and use the appropriate values for vendor and product ids for the USB modem, by referring to the file /proc/bus/usb/devices.\n1usbserial vendor=0x19d2 product=0xfffd 2cdc_acm Save the file and exit the terminal.\nReboot the machine for automatic driver loading to happen.\nConfigure Dial-Up connection Open a terminal and the command sudo bash in order to enter BASH as super-user.\nTake a backup of the file /etc/wvdial.conf and then replace it\u0026rsquo;s content with the following configuration.\n1[Dialer Defaults] 2Init1 = ATZ 3Init2 = AT+CRM=1 4Modem Type = Analog Modem 5SetVolume = 0 6Baud = 115200 7New PPPD = yes 8Modem = /dev/ttyUSB0 9Carrier Check = no 10Stupid Mode = 1 11ISDN = 0 12Phone = \u0026lt;dial-number\u0026gt; 13Password = \u0026lt;dial-password\u0026gt; 14Username = \u0026lt;dial-username\u0026gt; Use appropriate values for dial-number, dial-password and dial-username. For Reliance CDMA modem, dial-number will be #777 and, dial-password and dial-username will be the phone number itself.\nSave and close the file.\nTake a backup of /etc/resolv.conf then, clear all the content of /etc/resolv.conf and save it.\nRun wvdial to initiate the PPP connection.\nNAT forwarding with iptables In this step, we will be configuring the NAT table to masquerade ppp0 network interface and configure forwarding rule for the ethernet interface.\nOpen a terminal and the command sudo bash in order to enter BASH as super-user.\nCreate or open the file /usr/local/sbin/ppp_eth_route and enter the following content. If the file altready exists, first take a backup and then replace its content with the following.\n1#!/bin/bash 2 3## Flush the nat table 4iptables --flush 5iptables --table nat --flush 6 7iptables --delete-chain 8iptables --table nat --delete-chain 9 10## Set up IP forwarding and masquerading 11iptables --table nat --append POSTROUTING --out-interface ppp0 -j MASQUERADE 12iptables --append FORWARD --in-interface eth0 -j ACCEPT 13 14echo 1 \u0026gt; /proc/sys/net/ipv4/ip_forward Save the file and change its permission to 0755 using the command;\n1chown 755 /usr/local/sbin/ppp_eth_route Run the ppp_eth_route script created above.\nSetting up local DNS and DHCP server We will be using the dnsmasq tool to setup a DHCP server and configure the DNS host resolution.\nOpen a terminal and the command sudo bash in order to enter BASH as super-user.\nEdit the file /etc/network/interfaces and replace it\u0026rsquo;s content with the following. It is recommended to take a backup of the file before changing it\u0026rsquo;s content.\n1auth eth0 2iface eth0 inet static 3address 10.10.1.1 4netmask 255.255.255.0 Save and close the file.\nEdit the file /etc/dnsmasq.conf as follows. Then, save and close the file.\nUncomment the line containing interface=eth0 Uncomment the line that starts with dhcp-range to enable integrated DHCP server. The line must be edited as dhcp-range=10.10.1.10,10.10.1.200,12h Here, the dnsmasq tool is allowed to provide IPs in the range 10.10.1.10 to 10.10.1.200 with a lease time of 12 hours.\nRestart the system services - network-manager and dnsmasq.\nNOTE The above steps are one time activity. For subsequent use, you need to run the following steps as superuser (i.e., sudo). You need to ensure the USB modem and the WiFi router are properly connected to the Linux machine. Restart the system networking / network-manager service. Run wvdial \u0026amp;. Wait till it fetches IP address and DNS entries. Otherwise, there is no use in proceeding further since, there is likely a PPP connection issue. Run /usr/local/sbin/ppp_eth_route. Restart the system dnsmasq service. Of course, you can put the above commands in a shell script and run them as super-user. That\u0026rsquo;s it!\n","date":"Nov 10, 2021","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/posts/usb-cdma-wifi/","series":["Reference"],"smallImg":"","tags":["linux","debian","ubuntu","wifi","cdma"],"title":"Home Wifi With CDMA Modem"},{"categories":null,"content":"I\u0026rsquo;m a software programmer and architect by profession, promoting free and open source software (FOSS) based solutions to businesses. Traveling, World Culture, Traditions, Literature and Music interests me. I speak primarily in Kannada, a beautiful language of South Indian state of Karnataka and one of the classical languages of India.\nThanks for visiting.\n","date":"Nov 7, 2021","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/about/","series":null,"smallImg":"","tags":null,"title":"About Me"},{"categories":null,"content":"","date":"Jan 1, 0001","img":"","largeImg":"","permalink":"https://www.ravihara.in/en/contact/","series":null,"smallImg":"","tags":null,"title":"Contact Me"}]