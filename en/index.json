[{"categories":["programming"],"content":"This post captures various best-practices and/or useful suggestions which might come handy while programming in Java. These are purely my observations and opinion using Java as the programming language to create backend services and cross-platform applications. Moreover, I have been using the latest stable version of Java (v17 LTS). Hence, some of the points might not be relevant to older versions. But, I try to capture the features which are common enough in the recent past.\nOne of the fundamental mental model that a typical Java developer needs to develop is, to get a clarify on when to use a Class and when to use an Interface. In fact Class and Interface, if used judiciously, can compliment each other and adapt natually to suite one\u0026rsquo;s programming goals. Instead of being too descriptive, let me jot down some of the usecases and try to explain those with an example.\nA quick recap of OOP with Java  In an OOP language such as Java, an object represents an entity which has states and behaviours. The state is typically captured via the fields / member variables of the object. The behaviour is typically handled via the methods / member functions of the object. The state should be internal to an object. It should not be exposed and modified directly by externally. The behaviours are meant to handle all the state changes and act upon internal events (within the object) and external events (within the system in which the object belongs and also from the connected ecosystem).  NOTE The term behavioural siganture in this article essentially means, a method signature in an interface or a class. The classes which implement those behaviours can have completely independent and unrelated implementation details, as needed.  Usecases Entities of same kind, requiring a common set of behavioural signatures.\nThe requirement here is to have multiple entities of the same kind, all of which requiring a common set of behavioural signatures.\nSolution:\n Implement an abstract base class with abstract and non-abstract methods. The non-abstract methods are meant to provide base implementation so that, the derived entity classes can skip their implementations as needed. Extend the abstract class with appropriate entity classes, overriding the methods as required.  SAMPLE Checkout the sample Java classes - Shape.java, Circle.java, Rectangle.java under class-vs-iface. Here, the \u0026lsquo;Circle\u0026rsquo; and \u0026lsquo;Rectangle\u0026rsquo; classes are of the same kind \u0026lsquo;Shape\u0026rsquo;. Hence, they extend the \u0026lsquo;Shape\u0026rsquo; base class.  Entities of different kind, requiring a common set of behavioural signatures.\nThe requirement here is to have multiple, unrelated entities, all of which requiring a common set of behavioural signatures.\nSolution:\n Define an interface covering all the method signatures, as required by the entity classes. Provide default implementations of methods if some of the entity classes might not implement one or more interface methods immediately. Create various entity classes implementing the interface. In the future, if any new method signature needs to be added to the interface, do provide a default implementation so that existing entity classes still satisfy the interface definition. This allows the entity classes to provide overridden method implementations in the future, as required.  SAMPLE Checkout the sample Java classes - Authenticator.java, User.java, AppClient.java under class-vs-iface. Here, \u0026lsquo;User\u0026rsquo; and \u0026lsquo;AppClient\u0026rsquo; classes are of different kind. \u0026lsquo;User\u0026rsquo; class represents a person or, user while \u0026lsquo;AppClient\u0026rsquo; represents a registered, application-client for a given web service. Hence, both these classes implement the interface \u0026lsquo;Authenticator\u0026rsquo; independently.  Entities of mixed kinds, requiring a common set of behavioural signatures.\nThe requirement here is to have multiple, closely related and unrelated entities, all of which requiring a common set of behavioural signatures.\nSolution:\n Define an interface covering all the method signatures, as required by the entity classes. Define various abstract classes implmenting the defined interface, each for a set of closely related entities. Implement the defined interface directly for entity classes which do not derive from any of the abstract class(es) as defined above. Create various closely related entity classes by extending the appropriate abstract class. Each of them may further override the methods as appropriate. In the future, if any new method signature needs to be added to the interface, do provide a default implementation so that existing classes (abstract or otherwise) still satisfy the interface definition. This allows the implementing classes to provide overridden method implementations in the future, as required.  SAMPLE Checkout the sample Java classes - Authenticator.java, User.java, LeadUser.java, SalesUser.java, AppClient.java under class-vs-iface. Here, the classes \u0026lsquo;User\u0026rsquo; and \u0026lsquo;AppClient\u0026rsquo; are of different kind and hence, implement the \u0026lsquo;Authenticator\u0026rsquo; interface independently. The classes \u0026lsquo;LeadUser\u0026rsquo; and \u0026lsquo;SalesUser\u0026rsquo; are of the kind \u0026lsquo;User\u0026rsquo;. Hence, they extend the \u0026lsquo;User\u0026rsquo; which, also satisfies the \u0026lsquo;Authenticator\u0026rsquo; interface.  The maven based, sample Java project explaining the above usecases can be found in the class-vs-iface module folder of the java-points git repository;\n","date":"Dec 12, 2021","img":"","permalink":"https://blog.mustertech.org/en/posts/java-class-vs-iface/","series":["Manual"],"tags":["java","best-practice"],"title":"Using Abstract Class and Interface in Java"},{"categories":["Ubuntu","System"],"content":"In this post, I\u0026rsquo;ll be describing how to setup automatic mounting of one or more Google Drives locally, on your Ubuntu system. Following steps should generally work for the supported Ubuntu versions of the google-drive-ocamlfuse tool. Let\u0026rsquo;s just right into the setup steps.\nAssumptions Here are the list of assumptions made for descriptive purposes. Please replace them with appropriate values based on your system and environment.\n Normal user: ubuntu Base path for GDrive mount folders: $HOME/Store (Ex., /home/ubuntu/Store) Gmail address corresponding to the drive: sample01@gmail.com  Mount folder for GDrive under base path: gdrive01  Install Google Drive tool for Ubuntu Thanks to Alessandro Strada for this nice tool called google-drive-ocamlfuse , written in OCAML language. We will be using this tool to mount one or more Google Drives under appropriate folder(s) locally. Pre-built binaries for this tool are available from Ubuntu PPA . It can be installed as follows. For more detailed installation steps and other ways to install and setup your system, please refer to the tool\u0026rsquo;s link as mentioned earlier.\nInstall google-drive-ocamlfuse tool by running the following commands in a terminal, with superuser privileges (i.e., sudo).\n1sudo add-apt-repository ppa:alessandro-strada/ppa 2sudo apt-get update 3sudo apt-get install google-drive-ocamlfuse 4sudo dpkg --configure -a ## Optional, mainly to complete any pending package configurations Setup BASH script to mount Google Drive(s)   Open a text editor as normal user and create a new BASH script by name mount-google-drives with the following content. Edit the values in the configuration block based on your need. 1 #!/bin/bash 2 # Script to mount google-drive accounts locally 3 4 ############ Configuration block - START ############ 5 ## Either \u0026#39;export\u0026#39; GDRIVE_BASE folder in ~/.bashrc or, 6 ## completely hardcode the absolute path here. 7 ## 8 ## This indicates the base folder under which, various 9 ## google-drive account folders are mounted. 10 GDRIVE_BASE=${GDRIVE_BASE:-$HOME/Store} 11 12 ## Define mapping between a google-account label and 13 ## corresponding destination folder to mount it. The 14 ## mount-dir (i.e., destination folder) will be a folder 15 ## within the GDRIVE_BASE. 16 ## 17 ## The label need not match exactly with your gmail username 18 ## part. It\u0026#39;s just an identifier to help you in identifying 19 ## the mounted google-drive. 20 ## 21 ## Multiple label-mount-dir can be provided in the array 22 ## below, by adding them in their own line. 23 GDRIVE_MAPPING=( 24 #\u0026#34;label|mount-dir\u0026#34; 25 \u0026#34;sample01|gdrive01\u0026#34; 26 ) 27 ############ Configuration block - END ############ 28 29 ############ No need to touch anything below this ############ 30 for drv in $GDRIVE_MAPPING; do 31 label=$(echo $drv | awk -F \u0026#39;|\u0026#39; \u0026#39;{print $1}\u0026#39;) 32 mount_dir=$(echo $drv | awk -F \u0026#39;|\u0026#39; \u0026#39;{print $2}\u0026#39;) 33 34 [[ -z \u0026#34;$label\u0026#34; ]] || [[ -z \u0026#34;$mount_dir\u0026#34; ]] \u0026amp;\u0026amp; echo -e \u0026#34;GDrive label or mount-dir not defined!\u0026#34; \u0026amp;\u0026amp; exit 1 35 36 mount_point=\u0026#34;$GDRIVE_BASE/$mount_dir\u0026#34; 37 38 CHECK_DRIVE=$(mount | grep -E \u0026#34;$mount_point\u0026#34; | grep -v \u0026#34;grep\u0026#34;) 39 [[ -z \u0026#34;${CHECK_DRIVE}\u0026#34; ]] \u0026amp;\u0026amp; mkdir -p $mount_point \u0026amp;\u0026amp; google-drive-ocamlfuse -label $label $mount_point \u0026amp;\u0026amp; \\ 40 sync || echo -e \u0026#34;GDrive for ${label}already mounted\u0026#34; 41 done 42 43 exit 0 44 \n  Save the file and close the editor.\n  Move the file into $HOME/.local/bin folder. If the folder doesn\u0026rsquo;t exist, create it by running mkdir -p $HOME/.local/bin.\n  Set the executable bit for the script by running chmod +x $HOME/.local/bin/mount-google-drives.\n  Ensure that $HOME/.local/bin is set as part of the PATH environment variable by running echo $PATH.\n  If $HOME/.local/bin is not set as part of the PATH environment, you can add the following line to $HOME/.bashrc file\n1PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34;   Close the terminal.\n  The script should be good enough for manual mounting of Google drives at any point. This script also ensures that, the Google drives are mounted only once, even if it is run multiple times.\nIn case, you would like the Google drives to get automated on every login, you just need to do the following.\n  Open a text editor and create the file mount-google-drives.desktop under $HOME/.config/autostart folder. Create the folder, if it doesn\u0026rsquo;t already exist.\n1[Desktop Entry] 2Type=Application 3Exec=/home/ubuntu/.local/bin/mount-google-drives 4Hidden=false 5NoDisplay=false 6X-GNOME-Autostart-enabled=true 7Name[en_US]=Google Drives 8Name=Google Drives 9Comment[en_US]=Mount Google Drive locally 10Comment=Mount Google Drive locally TIP Update the absolute path to the `mount-google-drives` script for `Exec` entry based on your username.      Save the file and close the editor.\n  Now, logout of your desktop session and login again. If all the steps are followed correctly, you should see your mounted Google drive(s) locally, using File Explorer or by running df -TH command in a terminal.\nHope it helped you!\n","date":"Nov 14, 2021","img":"","permalink":"https://blog.mustertech.org/en/posts/gdrive-fuse-mount/","series":["Manual"],"tags":["google-drive","linux","ubuntu"],"title":"Mount Google-Drive in Ubuntu"},{"categories":["Ubuntu","Networking"],"content":"In case CDMA technology is still offered in your area, this post might be useful to you in setting up a simple Home WiFi using a CDMA modem, WiFi router and a Linux machine. This could be a good excercise to revive your old Linux box and that old WiFi router which had been laying useless :-).\nWhat you need  Linux machine - An old Debian / Ubuntu Linux pc will do too. WiFi router - An old 2.4GHz router from DLink would work. CDMA-1x USB modem - Typically available as CDMA USB-Dongle. Ethernet cable to connect the Router to the Linux machine.  Hardware setup  Configure the WiFi router to act as an access point using the Router\u0026rsquo;s web interface. Connect the Ethernet cable to one of the 4 ports of the Router and the other end to the Linux machine\u0026rsquo;s Ethernet port. Connect the CDMA USB modem to one of the USB port of the Linux machine.  Software setup   Install the following packages using the package manager.\n1apt-get install -y pppd wvdial iptables dnsmasq   Ensure that the Linux device driver modules usbserial and cdc_acm are loaded. You may use the command insmod in case they are not already loaded.\n  Setting up the WiFi This process involves the following main steps.\n Configuring kernel modules for auto-loading at bootup Configuring and running “wvdial” for dialup (ppp) connection Setting up “iptables” for NAT forwarding Setting up “dnsmasq” for resolving DNS and as DHCP server  Configure Kernel modules   Open a terminal and the command sudo bash in order to enter BASH as super-user.\n  Edit the file /etc/modules and append the following lines if they do not already exist. Check and use the appropriate values for vendor and product ids for the USB modem, by referring to the file /proc/bus/usb/devices.1usbserial vendor=0x19d2 product=0xfffd 2cdc_acm   Save the file and exit the terminal.\n  Reboot the machine for automatic driver loading to happen.\n  Configure Dial-Up connection   Open a terminal and the command sudo bash in order to enter BASH as super-user.\n  Take a backup of the file /etc/wvdial.conf and then replace it\u0026rsquo;s content with the following configuration.1[Dialer Defaults] 2Init1 = ATZ 3Init2 = AT+CRM=1 4Modem Type = Analog Modem 5SetVolume = 0 6Baud = 115200 7New PPPD = yes 8Modem = /dev/ttyUSB0 9Carrier Check = no 10Stupid Mode = 1 11ISDN = 0 12Phone = \u0026lt;dial-number\u0026gt; 13Password = \u0026lt;dial-password\u0026gt; 14Username = \u0026lt;dial-username\u0026gt; Use appropriate values for dial-number, dial-password and dial-username. For Reliance CDMA modem, dial-number will be #777 and, dial-password and dial-username will be the phone number itself.\n  Save and close the file.\n  Take a backup of /etc/resolv.conf then, clear all the content of /etc/resolv.conf and save it.\n  Run wvdial to initiate the PPP connection.\n  NAT forwarding with iptables In this step, we will be configuring the NAT table to masquerade ppp0 network interface and configure forwarding rule for the ethernet interface.\n  Open a terminal and the command sudo bash in order to enter BASH as super-user.\n  Create or open the file /usr/local/sbin/ppp_eth_route and enter the following content. If the file altready exists, first take a backup and then replace its content with the following.\n1 #!/bin/bash 2 3 ## Flush the nat table 4 iptables --flush 5 iptables --table nat --flush 6 7 iptables --delete-chain 8 iptables --table nat --delete-chain 9 10 ## Set up IP forwarding and masquerading 11 iptables --table nat --append POSTROUTING --out-interface ppp0 -j MASQUERADE 12 iptables --append FORWARD --in-interface eth0 -j ACCEPT 13 14 echo 1 \u0026gt; /proc/sys/net/ipv4/ip_forward 15    Save the file and change its permission to 0755 using the command;\n1chown 755 /usr/local/sbin/ppp_eth_route   Run the ppp_eth_route script created above.\n  Setting up local DNS and DHCP server We will be using the dnsmasq tool to setup a DHCP server and configure the DNS host resolution.\n  Open a terminal and the command sudo bash in order to enter BASH as super-user.\n  Edit the file /etc/network/interfaces and replace it\u0026rsquo;s content with the following. It is recommended to take a backup of the file before changing it\u0026rsquo;s content.\n1auth eth0 2iface eth0 inet static 3address 10.10.1.1 4netmask 255.255.255.0 Save and close the file.\n  Edit the file /etc/dnsmasq.conf as follows. Then, save and close the file.\n Uncomment the line containing interface=eth0 Uncomment the line that starts with dhcp-range to enable integrated DHCP server. The line must be edited as dhcp-range=10.10.1.10,10.10.1.200,12h  Here, the dnsmasq tool is allowed to provide IPs in the range 10.10.1.10 to 10.10.1.200 with a lease time of 12 hours.\n  Restart the system services - network-manager and dnsmasq.\n  NOTE The above steps are one time activity. For subsequent use, you need to run the following steps as superuser (i.e., sudo). You need to ensure the USB modem and the WiFi router are properly connected to the Linux machine.   Restart the system networking / network-manager service. Run wvdial \u0026amp;. Wait till it fetches IP address and DNS entries. Otherwise, there is no use in proceeding further since, there is likely a PPP connection issue. Run /usr/local/sbin/ppp_eth_route. Restart the system dnsmasq service.  Of course, you can put the above commands in a shell script and run them as super-user. That\u0026rsquo;s it!\n","date":"Nov 10, 2021","img":"","permalink":"https://blog.mustertech.org/en/posts/usb-cdma-wifi/","series":["Manual"],"tags":["wifi","cdma","linux","ubuntu"],"title":"Home Wifi With CDMA Modem"},{"categories":null,"content":"I\u0026rsquo;m a software programmer and architect by profession, promoting free and open source software (FOSS) based solutions to businesses. Traveling, World Culture, Traditions, Literature and Music interests me. I speak primarily in Kannada, a beautiful language of South Indian state of Karnataka and one of the classical languages of India.\nThanks for visiting.\n","date":"Nov 7, 2021","img":"","permalink":"https://blog.mustertech.org/en/about/","series":null,"tags":null,"title":"About Me"},{"categories":null,"content":"","date":"Jan 1, 0001","img":"","permalink":"https://blog.mustertech.org/en/contact/","series":null,"tags":null,"title":"Contact Me"}]