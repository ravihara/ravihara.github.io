<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on While I remember</title><link>https://blog.mustertech.org/en/categories/programming/</link><description>Recent content in programming on While I remember</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2021-{year} Ravishankar Haranath. All Rights Reserved.</copyright><lastBuildDate>Sun, 12 Dec 2021 11:55:24 +0530</lastBuildDate><atom:link href="https://blog.mustertech.org/en/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Using abstract class and interface in Java</title><link>https://blog.mustertech.org/en/posts/java-class-vs-iface/</link><pubDate>Sun, 12 Dec 2021 11:55:24 +0530</pubDate><guid>https://blog.mustertech.org/en/posts/java-class-vs-iface/</guid><description>This post captures various best-practices and/or useful suggestions which might come handy while programming in Java. These are purely my observations and opinion using Java as the programming language to create backend services and cross-platform applications. Moreover, I have been using the latest stable version of Java (v17 LTS). Hence, some of the points might not be relevant to older versions. But, I try to capture the features which are common enough in the recent past.</description></item></channel></rss>